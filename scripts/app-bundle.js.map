{"version":3,"sources":["app.js","environment.js","google-maps-loader.js","main.js","place-picker.js","resources/index.js","/Users/pampers/dev/aurelia/findechoes/src/style.css","/Users/pampers/dev/aurelia/findechoes/src/app.html","/Users/pampers/dev/aurelia/findechoes/src/place-picker.html"],"names":["App","configureRouter","config","router","title","map","route","moduleId","name","debug","testing","infoWindow","GoogleMaps","elem","options","KEY","LIBRARIES","load","console","log","initMap","div","input","mapOpts","srchOpts","location","onLoad","google","maps","Map","InfoWindow","service","places","PlacesService","nearbySearch","center","radius","types","callback","autocomplete","Autocomplete","controls","ControlPosition","TOP_LEFT","push","bindTo","marker","Marker","anchorPoint","Point","updateMarker","addListener","setVisible","place","getPlace","geometry","lat","lng","results","status","PlacesServiceStatus","OK","i","len","length","createMarker","placeLoc","position","event","setContent","open","loc","LatLng","setCenter","setPosition","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","PlacePicker","inject","Element","googleMaps","attached","mapContainer","document","getElementById","tokyo","zoom"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  configureRouter(config, router) {\n    config.title = 'Find Echoes';\n    config.map([\n        { route: '', moduleId: 'place-picker' },\n        { route: 'spot/:id', moduleId: 'spot-detail', name: 'spot' }\n    ]);\n\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import GoogleMapsLoader from 'google-maps';\n\nlet map;\nlet infoWindow;\n\nexport class GoogleMaps {\n  constructor(elem, options) {\n    GoogleMapsLoader.KEY = 'AIzaSyBqVDCRlASB7unQpQcfHf9_xr6-P95vT0E';\n    GoogleMapsLoader.LIBRARIES = ['places'];\n    GoogleMapsLoader.load(google => {\n      console.log('Google Maps has loaded');\n    });\n  }\n\n  initMap(div, input, mapOpts, srchOpts, location) {\n    GoogleMapsLoader.onLoad(google => {\n      console.log('initPlaces');\n\n      this.location = location;\n      console.log(this.location);\n      map = new google.maps.Map(div, mapOpts);\n      infoWindow = new google.maps.InfoWindow();\n\n      let service = new google.maps.places.PlacesService(map);\n      service.nearbySearch({\n        location: mapOpts.center,\n        radius: srchOpts.radius,\n        types: srchOpts.types,\n      }, callback);\n\n      // convert our input field into a place autocomplete field\n      let autocomplete = new google.maps.places.Autocomplete(input);\n      console.log(map.controls);\n      console.log(google.maps.ControlPosition.TOP_LEFT);\n      console.log(map.controls[google.maps.ControlPosition.TOP_LEFT]);\n      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n      autocomplete.bindTo('bounds', map);\n\n      // create a marker that show where the selected place is\n      let marker = new google.maps.Marker({\n        map: map,\n        anchorPoint: new google.maps.Point(0, -29)\n      });\n\n      // ensure that the current location is shown properly\n      updateMarker(marker, this.location);\n\n      // update the location and its marker every time a new place is selected\n      autocomplete.addListener('place_changed', () => {\n        marker.setVisible(false);\n        let place = autocomplete.getPlace();\n        if (place.geometry) {\n          this.location.name = place.name;\n          this.location.lat = place.geometry.location.lat();\n          this.location.lng = place.geometry.location.lng();\n          updateMarker(marker, this.location);\n        }\n      });\n    });\n  }\n\n}\n\nfunction callback(results, status) {\n  if (status === google.maps.places.PlacesServiceStatus.OK) {\n    for (let i = 0, len = results.length; i < len; i++) {\n      createMarker(results[i]);\n    }\n  }\n}\n\nfunction createMarker(place) {\n  console.log('createMaker');\n  console.log(place);\n  let placeLoc = place.geometry.location;\n  let marker = new google.maps.Marker({\n    map: map,\n    position: placeLoc\n  });\n\n  google.maps.event.addListener(marker, 'click', () => {\n    infoWindow.setContent(place.name);\n    infoWindow.open(map, this);\n  });\n}\n\n// move the marker and the map viewport\nfunction updateMarker(marker, loc) {\n  console.log('updateMarker');\n  console.log(marker);\n  console.log(loc);\n  let position = new google.maps.LatLng(loc.lat, loc.lng);\n  map.setCenter(position);\n  marker.setPosition(position);\n  marker.setVisible(true);\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { GoogleMaps } from './google-maps-loader';\n\nexport class PlacePicker {\n\n  static inject() { return [Element, GoogleMaps] };\n\n  constructor(elem, googleMaps) {\n    console.log('In constructor');\n    this.elem = elem;\n    this.maps = googleMaps;\n  }\n\n  attached() {\n    // This loads the Google Maps API asynchronously.\n    console.log('attached');\n    let mapContainer = document.getElementById('place-picker-map');\n    let input = document.getElementById('input-autocomplete');\n    let tokyo = {lat: 35.68944, lng: 139.69167};\n    let mapOpts = {\n      center: tokyo,\n      zoom: 16\n    };\n    let srchOpts = {\n      radius: 500,\n      types: ['store']\n    };\n\n    console.log(tokyo);\n    this.maps.initMap(mapContainer, input, mapOpts, srchOpts, tokyo);\n  }\n}\n\n//    this.mapsApi.then(maps => {\n//      console.log(maps);\n//      // Now that it's loaded, add a map to our HTML\n//      let mapContainer = this.elem.getElementById('place-picker-map');\n//      let map = new maps.Map(mapContainer, {\n//        center: {lat: -33.86888, lng: 151.2195},\n//        zoom: 13\n//      });\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null,null,null],"sourceRoot":"../src"}